\input texinfo
@setfilename gnubg.info
@settitle GNU Backgammon
@include version.texi

@set month-year December, 1999

@syncodeindex vr cp

@macro gnubg
@t{gnubg}
@end macro

@ifinfo
This file documents GNU Backgammon, a program for playing and analysing
backgammon games and matches.

Copyright @copyright{} 1999 Gary Wong.
@end ifinfo

@titlepage
@sp 10
@title GNU Backgammon
@subtitle version @value{VERSION}
@subtitle @value{month-year}
@author Gary Wong
@end titlepage

@ifnottex
@node Top
@top GNU Backgammon

This manual describes how to use GNU Backgammon to play and analyse
backgammon games and matches.  It corresponds to version @value{VERSION}
(updated in @value{month-year}).

@menu
* Introduction::                  What GNU Backgammon does.
* How to Play Backgammon::        The rules of the game.
* Sample Game::                   An example of how to play against gnubg.
* Invocation::                    Starting and leaving gnubg.
* Basic Commands::                Fundamental operations in gnubg.
* Playing::                       gnubg's game playing features.
* Analysis::                      Using gnubg to evaluate positions.
* Databases::                     Storing information about positions.
* Training::                      Modifying gnubg's neural nets.
* Frequently Asked Questions::    Brief answers to things you might ask.
* Command Index::                 A summary of all the gnubg commands.
* Concept Index::                 Index of concepts described in this manual.
@end menu

@end ifnottex

@node Introduction
@chapter Introduction
@cindex introduction

GNU Backgammon (@gnubg{}) plays and analyses backgammon games and matches. 

It is currently a work-in-progress.  When it is finished, it will be able
to play and analyse cubeless and cubeful games and tournament matches,
evaluate and roll out positions, tune its own evaluation functions using
either TD or supervised training, maintain databases of positions for
training and other purposes, and more.

It will be extensible on platforms where Guile is available, so that the
user can program it to answer sophisticated questions like ``How many
chequers must Black have borne off in positions like this one to be able
to accept a double?'' and automate complicated rollout tasks.  It will be
driven by a command-line interface, and will display an ASCII rendition
of a board on text-only terminals, but will also allow the user to play
games and manipulate positions with an X11 board window where available.

It currently plays at about the level of a strong intermediate flight
tournament player (rated in the mid 1700s on @dfn{FIBS},
@cindex FIBS
the First Internet Backgammon Server --- around the 90th percentile) and
is gradually improving; it should be somewhat stronger than this when
released.  Since almost all of the CPU time required during supervised
training is spent performing rollouts, and rollouts can easily be
performed in parallel, it is hoped that users will be able to pool
rollout results and collectively train it to a level stronger than any
individual could obtain.

If you can tolerate the rough edges, periodic snapshots of @gnubg{} and
anonymous CVS access to the pre-release source are being made available.
You can also compete against a recent version of @gnubg{} on FIBS; it
plays there under the name @samp{gnu}.

FIXME update this section.

@node How to Play Backgammon
@chapter How to Play Backgammon
@cindex backgammon
@cindex rules of backgammon

If you already know how to play backgammon, you can skip this chapter --- it
describes the rules of the game only, and does not contain any information
specific to GNU Backgammon.

FIXME write this.  Perhaps Tom Keith will let us steal the rules from
his web site.

@node Sample Game
@chapter Sample Game
@cindex sample game

Although GNU Backgammon has many commands and options, only a few of them
are used during routine play.  This chapter demonstrates some of those
most commonly used.

If your @gnubg{} installation is complete, you should be able to start it
and see output similar to the following:

@example
GNU Backgammon 0.02  Copyright 1999 Gary Wong.
GNU Backgammon is free software, covered by the GNU General Public
License, and you are welcome to change it and/or distribute copies
of it under certain conditions.  Type "show copying" to see the
conditions.
There is absolutely no warranty for GNU Backgammon.  Type "show
warranty" for details.
(No game) 
@end example

When you start a game, @gnubg{} will (by default) show which player's move it
is; it is displaying @samp{(No game)} at the moment to indicate that it
isn't anybody's turn.

GNU Backgammon uses a pseudo-random number generator to produce dice
rolls.  It will normally initialise the state of the generator to
some value based on the current time (and perhaps other system information,
depending what features are available on your platform).  But for purposes
of this example, it will be better to start the generator from a known
state, so that the rolls it generates will be repeatable.  Enter the
following command to change the generator state (``seed''):

@example
(No game) set seed 15
Seed set to 15.
(No game)   
@end example

The default settings allow you to play X (the black pieces, if you have
a graphical board window) and the computer will play O (red).  It will
play with no lookahead by default; it is very fast at choosing moves
in this mode (instantaneous, on most hardware) though it does not play
at its full strength.  Let's start a game.

@example
(No game) new game
O rolls 1, X rolls 3.
@group
 GNU Backgammon  Position ID: 4HPwATDgc/ABMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    |   | O              X |     
 | X           O    |   | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 | X                |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   | X                |    
 | O                |   | X                |     
 | O           X    |   | X                |     
 | O           X    |   | X              O |     
 | O           X    |   | X              O |     Rolled 13
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

This is the output you will see if a graphical board is unavailable or
disabled; if your environment supports a graphical board, you will see a
better representation of a backgammon board than this.  Exactly the
same information is available, either way.

You have just won the opening roll (you have a 3, and @gnubg{} has a 1) --- the
dice roll is in the bottom right hand corner for the TTY board, or shown
as graphical dice on the right hand side of the board window.  The
position ID (the @samp{4HPwATDgc/ABMA} in this example) is an encoded
representation of the current position.  It comes in useful when using
some of @gnubg{}'s advanced commands, but you can safely ignore it for now.
Notice that the prompt has changed to @samp{(X)}, to indicate that it
is X's (your) turn.

If you are familiar with backgammon, you will know that the best play
for this roll is to make your 5 point.  The command to do that is:

@example
(X) 8 5 6 5
@end example

@noindent
in the terminal window (i.e.@: move one chequer from your 8 point to your 5
point, and move another from your 6 to your 5 point); or by dragging
each chequer to the destination point with mouse button 1 in the board
window.  Click mouse button 1 on the dice to indicate you have finished
your move (just as you would pick up your dice to end your move if you
were playing on a real board).

Once you have done that, @gnubg{} will take its turn, rolling 63 and playing
24/15.  It is now your move again:

@example
@group
 GNU Backgammon  Position ID: 4HPwCSCwZ/ABMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    |   | O              X |     
 | X           O    |   | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 | X                |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   | X                |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     O     X    |   | X  X           O |     On roll
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

Since it is no longer the opening roll, you have the option of doubling
before rolling your dice.  To roll without doubling, just enter the
command @kbd{roll} (or @kbd{r} for short):

@example
(X) roll
@group
 GNU Backgammon  Position ID: 4HPwCSCwZ/ABMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    |   | O              X |     
 | X           O    |   | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 | X                |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   | X                |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     O     X    |   | X  X           O |     Rolled 35
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X)
@end example

@noindent
(You can also roll by clicking the dice just underneath the board
window.)

Let's play this roll by hitting twice: 13/10*, 6/1*.  You can enter this
move with @kbd{13 10 6 1} --- note that you don't need to specify anything
special to hit; @gnubg{} will automatically move blots that are hit to the
bar.  You can also make this move by dragging chequers in the board window,
of course.

@example
(X) 13 10 6 1
@group
 GNU Backgammon  Position ID: 4HPwAWBhZ+IBMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    | O | O              X |     
 | X           O    | O | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 |                  |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   |                  |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     X     X    |   | X  X           X |     On roll
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

GNU Backgammon has rolled 65 and been unable to move.  Let's take another
roll:

@example
(X) roll
@group
 GNU Backgammon  Position ID: 4HPwAWBhZ+IBMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    | O | O              X |     
 | X           O    | O | O              X |     
 | X           O    |   | O                |     
 | X                |   | O                |     
 |                  |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   |                  |     
 | O                |   | X                |     
 | O           X    |   | X  X             |     
 | O     X     X    |   | X  X           X |     Rolled 25
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X)
@end example

Play this roll as @kbd{13 11 6 1}.  @gnubg{} will now roll 16 --- and still
can't move!

@example
@group
 GNU Backgammon  Position ID: 4HPwAWDDZsoBMA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O
 | X           O    | O | O              X |     
 | X           O    | O | O              X |     
 | X           O    |   | O                |     
 |                  |   | O                |     
 |                  |   | O                |    
v|                  |BAR|                  |     (Cube: 1)
 | O                |   |                  |    
 | O                |   |                  |     
 | O                |   |                  |     
 | O           X    |   | X  X           X |     
 | O  X  X     X    |   | X  X           X |     On roll
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X
@end group

(X) 
@end example

Our position is now strong.  Let's try doubling --- this can be done by
entering the command @kbd{double} at the prompt, or by clicking the
doubling cube in the board window (FIXME not implemented yet).  When
you are doubled, you should use the command @kbd{take} or @kbd{drop}
to accept or refuse the cube.  GNU Backgammon will drop this double
(FIXME actually it doesn't, but it will once it knows how):

@example
(X) double
O refuses the cube and gives up 1 point.
X wins a single game and 1 points.
The score (after 1 game) is: O 0, X 1.
@end example

That concludes the example game.  You have seen most of the commands
normally used while playing; others you will need include @kbd{bar}
when re-entering a hit chequer (e.g.@: @kbd{bar 20 24 20}) and
@kbd{off} to remove a chequer from the board when bearing off
(e.g.@: @kbd{6 off 5 off}).

Type @kbd{help} from within @gnubg{} for a summary of all commands, or
browse the rest of this manual to learn more.  Have fun playing
GNU Backgammon!

@ignore
We need to think of logical sections that each command belongs to so
that appropriate commands are documented together.  We can easily make
a table or summary later to group commands by name; for the rest of
the manual it is better to group them by purpose.

accept                  playing
agree                   playing
beaver                  playing         / cube
database dump           databases
database evaluate       databases
database generate       databases
database train          databases
decline                 playing
double                  playing         / cube
drop                    playing         / cube
eval                    analysis
exit                    invocation
help                    basic
hint                    playing?
load game               playing         / recording
load match              playing         / recording
load weights            training
move                    playing
new game                playing
new match               playing         / matches and sessions
new session             playing         / matches and sessions
play                    playing         / computer player
quit                    invocation
redouble                playing         / cube
reject                  playing
resign                  playing
roll                    playing         / dice
rollout                 analysis
save game               playing         / recording
save match              playing         / recording
save weights            training
set autobearoff         playing
set autocrawford        playing         / matches and sessions
set autogame            playing         / matches and sessions
set automove            playing
set autoroll            playing         / dice
set board               playing
set cache               analysis?
set crawford            playing         / matches and sessions
set cube centre         playing         / cube
set cube owner          playing         / cube
set cube value          playing         / cube
set dice                playing         / dice
set display             playing?
set jacoby              playing         / matches and sessions
set player gnubg        playing         / computer player
set player human        playing         
set player name         playing         
set player plies        playing         / computer player
set player pubeval      playing         / computer player
set plies               analysis
set postcrawford        playing         / matches and sessions
set prompt              playing?
set rng ansi            playing         / dice
set rng bsd             playing         / dice
set rng isaac           playing         / dice
set rng manual          playing         / dice
set rng mersenne        playing         / dice
set rng user            playing         / dice
set score               playing         / matches and sessions
set seed                playing         / dice
set turn                playing
show board              playing
show cache              analysis?
show copying            basic
show crawford           playing         / matches and sessions
show dice               playing         / dice
show jacoby             playing         / matches and sessions
show pipcount           playing
show player             playing
show postcrawford       playing         / matches and sessions
show rng                playing         / dice
show score              playing         / matches and sessions
show seed               playing         / dice
show turn               playing
show warranty           basic
take                    playing         / cube
train database          databases
train td                training
@end ignore

@node Invocation
@chapter Starting and Leaving @gnubg

This chapter describes how to run @gnubg{}, and how to end it when you
are finished.

@menu
* Invoking gnubg::              How to start gnubg.
* Leaving gnubg::               How to end gnubg.
* Shell Commands::              How to issue shell commands from within gnubg.
@end menu

@node Invoking gnubg
@section Invoking @gnubg
@cindex invoking @t{gnubg}
@cindex starting @t{gnubg}
@cindex running @t{gnubg}
@cindex command line options

Start GNU Backgammon by running the program @kbd{gnubg}.  Once started, it
will process commands from the terminal.

You can also instruct @gnubg{} to read an existing match from a file, to
play or analyse.  (FIXME actually you can't yet, but you should be able
to.)  To read the match from @var{filename}, specify
@kbd{gnubg @var{filename}}.

@gnubg{} will give you a short summary of how to invoke it if given the
option @option{--help} (@option{-h} for short), and report its version
with @option{--version} (@option{-v}).

GNU Backgammon will normally use a graphical board window under the X
Window System, if possible.  To prevent this behaviour and use standard
terminal output instead, you can specify the @option{--tty} option (which
can be abbreviated to @option{-t}).

@node Leaving gnubg
@section Leaving @gnubg
@cindex leaving @t{gnubg}
@cindex exiting @t{gnubg}

@table @code
@kindex exit
@kindex quit
@item exit
@itemx quit
To exit @gnubg{}, use the @kbd{exit} or @kbd{quit} commands (they are
synonymous).  If you are currently playing a game, the match in progress
will be lost, so @gnubg{} will ask you if you are sure you want to exit
in this case.  (FIXME it doesn't yet, but it should.)
@end table

@gnubg{} will also exit upon end-of-file; you can therefore exit by typing
an end-of-file character (usually @kbd{C-d}, i.e.@: hold the @key{CTRL}
key and press D).

@cindex interrupting @t{gnubg}
@cindex cancelling commands
If you send an interrupt sequence (often by pressing @kbd{C-c}), the
current @gnubg{} command (if any) will be terminated.  This can be useful
if you do not want to wait for a slow command to complete.

@node Shell Commands
@section Shell Commands
@cindex shell commands
@cindex escapes, shell

You can execute shell commands from @gnubg{} without leaving or suspending it.

@table @code
@kindex !
@item !@var{command}
Invoke a subshell to execute @var{command}.  The environment variable
@code{SHELL} determines which shell to use (@gnubg{} defaults to
@file{/bin/sh} if @code{$SHELL} is not set).  If @var{command} is not
specified, the shell will be invoked.  FIXME not implemented yet.
@end table

@node Basic Commands
@chapter Basic Commands
@cindex basic commands
@cindex commands, basic

There are a few simple commands you can use within GNU Backgammon to
display information you might need to know:

@table @code
@kindex help
@kindex ?
@item help @var{command}
@itemx ? @var{command}
Describe the commands that @gnubg{} understands.  @code{help} by itself
lists the main commands with a one-line description of each; when
@var{command} is specified, that command is explained in more detail,
and if it has any subcommands then they are listed in brief.

@code{?} is a synonym for @code{help}.
@kindex show copying
@kindex show warranty
@item show copying
@itemx show warranty
These commands are used to show the conditions GNU Backgammon is distributed
under.  FIXME summarise GPL.
@end table

@node Playing
@chapter Playing Backgammon with @gnubg
@cindex playing commands
@cindex commands, playing

FIXME introduction

@menu
* The Game::                      Commands used during the game.
* Dice::                          Controlling dice rolls.
* Computer Player::               Having gnubg make moves.
* Matches and Sessions::          Playing series of games.
* Cube::                          Using the doubling cube.
* Recording::                     Saving games and matches.
@end menu

@node The Game
@section Commands Used During the Game
@cindex game commands

@table @code
@kindex new game
@item new game
This command is used to start a game within a match or session.  (Note
that all games are played within matches or sessions; see
@ref{Matches and Sessions}.  To play a single game, use either a
1 point match or a session lasting for one game, depending whether
you want gammons and the doubling cube to be active.)  @code{new game}
will set up the board in the starting position, and roll one die for
each player for the opening move.

If you are in the middle of a game, @code{new game} will ask you if
you want to abort the game in progress.  If you do, a new game will
replace the current one (i.e.@: the partially completed game will have
no effect on the score).  If you want the current game to be scored
for either player, you should use the @code{resign} command instead.
@kindex move
@item move @var{from} @var{to} @dots{}
@itemx @var{from} @var{to} @dots{}
The @code{move} command allows you to make chequer plays when it is your
turn.  In its normal form, you should specify pairs of point numbers
indicating the points you want to move a chequer from and to.  Specify
one pair for each chequer you want to move.  (For instance, on an
opening roll of 31, you might use @code{move 8 5 6 5} to move two
chequers --- one from your 8 point to your 5 point, and the other from
your 6 point to your 5 point.)  For several example moves, see
@ref{Sample Game}.

You should use the words @code{bar} and @code{off} when moving a chequer
from the bar or bearing it off the board, e.g.@: @code{move bar 20} or
@code{move 3 off}.  These words can be abbreviated to @code{b} and
@code{o} respectively.

If there is only one legal move you can make, then the command @code{move}
by itself will make it for you without requiring you to specify it in full.
Similarly, if there is no play available at all, then @code{move} will
end your turn without moving.

As long as you specify at least one pair of points, then the word
@code{move} is optional --- the command @code{bar 20 24 20} means exactly
the same thing as @code{move bar 20 24 20}, for instance.

If you are using the X Window System, you can also move chequers using
the board window.  One way to do this is to use mouse button 1 to drag
a chequer (that is, press the button when the pointer is over the
chequer you wish to move; move the pointer to the point you wish to
play it to, and then release the button).

An alternative is to click buttons 2 or 3 on the chequer; button 2 will
move it by the number of pips showing on the left die, and button 3 will
move it according to the right die.  If you don't like the order the
dice are displayed in, pressing either button 2 or 3 on the dice will
swap their positions.

Whichever method you use to move the chequers, once you have made a legal
move you can end your turn by clicking mouse button 1 on the dice.

FIXME reference set automove and set autobearoff.
@kindex resign
@kindex agree
@kindex accept
@kindex decline
@kindex reject
@item resign [@var{type}]
@itemx agree
@itemx accept
@itemx decline
@itemx reject
The @code{resign} command is used to give up a game without playing it to
completion.  It is often useful during endgame play when the game reaches
a position where it is impossible for one player to win.  If you do not
specify a value @var{type}, then the player whose turn it is offers to
give up one game (at the current cube value) to the opponent; you can
also specify @code{1}, @code{2} or @code{3} to resign a single, double
or triple game.  Specifying @code{normal}, @code{gammon} or
@code{backgammon} is also legal, and is identical to expressing the
number of points as a digit.  @code{single} is yet another synonym for
one game.

The opponent may accept the resignation with either the @code{agree} or
@code{accept} commands, but is not obliged to.  To ignore the
resignation and continue play normally, use either the @code{decline} or
@code{reject} commands.  (@code{accept} and @code{reject} are also legal
commands in response to a double; @pxref{Cube}.)
@kindex set board
@item set board @var{id}
If you wish to directly set the chequers to a different position, you
can use the @code{set board} command.  You need to know the
@dfn{position ID} of the chequer arrangement you want; position IDs
are always displayed when the board is shown.  (If you are playing
on a text terminal, the position ID is in the upper right hand corner
of the board diagram; when using the X board window, the ID is shown
below the board on the right hand side.)  For instance, to set the
chequers to the starting position, use the command
@code{set board 4HPwATDgc/ABMA}.

FIXME add a mode to set the board to an arbitrary position when the user
doesn't know the ID, in the X version at least.
@kindex show board
@item show board [@var{id}]
The @code{show board} command is used to display a particular position ---
normally the board of the current game, but it is also possible to view
unrelated layouts.  When specified without the optional @var{id} parameter,
the current position is displayed.  (When using a text terminal, this
is useful if subsequent output has caused the board diagram to scroll
off the screen.  In the X board window, the command can be used to undo
erroneous chequer plays by resetting the window to the position at the
start of the turn.)

When a position ID @var{id} is given, the chequers are arranged into
the position specified and that board is displayed.  Note that this
command affects the display only; the current game is unchanged.  Use
the @code{show board} command with no parameter if you want to see
the current game again.
@kindex hint
@item hint
At any time during the game when the dice have been rolled, you can
use the @code{hint} command to see the moves @gnubg{} recommends.
The output is of the following form:

@example
@group
Win    W(g)   W(bg)  L(g)   L(bg)  Equity       Move
0.542  0.142  0.008  0.113  0.008  (+0.114)     6/5 8/5 
0.505  0.120  0.008  0.122  0.007  (+0.009)     24/23 23/20 
0.498  0.126  0.008  0.123  0.007  (+0.000)     24/23 13/10 
0.499  0.113  0.008  0.121  0.007  (-0.011)     24/23 24/21 
0.486  0.125  0.008  0.120  0.009  (-0.024)     13/10 10/9 
0.481  0.116  0.008  0.129  0.008  (-0.051)     6/5 24/21 
0.472  0.122  0.008  0.129  0.009  (-0.064)     6/5 13/10 
@end group
@end example

The moves are listed in descending order of preference, so in this case,
@gnubg{} recommends the move @samp{6/5 8/5}.  The first five columns are
its estimates of the probability of the player on roll winning
(@samp{Win}), winning a gammon (@samp{W(g)}), winning a backgammon
(@samp{W(bg)}), losing a gammon (@samp{L(g)}), and losing a backgammon
(@samp{L(bg)}) if the game is played to completion without use of the
doubling cube, after the candidate move in that row is
made@footnote{Note that the probability of winning includes the
probability of winning a gammon or backgammon, and likewise the gammon
probabilities include the backgammon probabilities.}.  The sixth column,
@samp{Equity}, is the estimated cubeless equity following the move ---
this is the expected number of points per game won by the player on
roll.

@gnubg{} will `look ahead' a certain number of moves when evaluating
the probabilities, according to the search depth set by the
@code{set plies} command (@pxref{Analysis}).
@kindex show pipcount
@item show pipcount
Use @code{show pipcount} to automatically count the number of `pips'
each player needs to bear off.  Depending on the position, the output
will look something like:

@example
The pip counts are: X 103, O 112.
@end example
@kindex set player human
@kindex set player name
@kindex show player
@itemx show player
@item set player @var{name} human
@itemx set player @var{old-name} name @var{new-name}
Both players have a certain amount of configuration information; use the
command @code{show player} to summarise these settings.  By default,
@gnubg{} will play for player 0, whose name is initially @samp{O}.
Player 1 defaults to a human (i.e.@: @gnubg{} will prompt the user
for a move when it is player 1's turn) whose name is @samp{X}.

Either player can be set to a human with the command
@code{set player @var{name} human}, where @var{name} is either the number
of the player (0 or 1) or that player's name (initially @samp{O} and
@samp{X}).  You can also specify @code{both} which will set both players
simultaneously.  There are also options for computer players
(@pxref{Computer Player}).

You can change the names of the players with the
@code{set player @var{old-name} name @var{new-name}} command.  Again,
either the player numbers or names are valid for the @var{old-name}
parameter.  Names may not contain whitespace characters, and may not
be longer than 31 characters.  The names @samp{0}, @samp{1} and
@samp{both} are not permitted, to avoid ambiguities, and the players
may not both share the same name.  Names are not case sensitive.
@kindex set turn
@kindex show turn
@item set turn @var{player}
@itemx show turn
FIXME
@kindex set autobearoff
@kindex set automove
@item set autobearoff
@itemx set automove
FIXME
@kindex set display
@item set display
FIXME
@end table

@node Dice
@section Controlling Dice Rolls
@cindex dice
@cindex rolls, dice

@table @code
@kindex set rng
@kindex show rng
@kindex roll
@kindex set autoroll
@kindex set dice
@item set rng @var{generator} [@var{seed}]
@itemx show rng
@itemx roll
@itemx set autoroll
@itemx set dice @var{pips} @var{pips}
FIXME
@end table

@node Computer Player
@section Having @gnubg{} Make Moves
@cindex computer player
@cindex @t{gnubg}, making moves

@table @code
@kindex play
@kindex set player gnubg
@kindex set player pubeval
@kindex set player plies
@item play
@itemx set player @var{name} gnubg
@itemx set player @var{name} pubeval
@itemx set player @var{name} plies @var{depth}
FIXME
@end table

@node Matches and Sessions
@section Matches and Sessions
@cindex matches
@cindex sessions

This section describes how to use GNU Backgammon to play series of
games, whether those games are part of a match (as in tournament
backgammon) or a session of independent games (conventionally
called ``money'' play, regardless of whether any money is involved).

@table @code
@kindex new match
@kindex new session
@kindex set autogame
@kindex set crawford
@kindex set postcrawford
@kindex set autocrawford
@kindex set jacoby
@kindex set autodoubles
@kindex set score
@kindex show crawford
@kindex show postcrawford
@kindex show jacoby
@kindex show autodoubles
@kindex show score
@item new match @var{length}
@itemx new session
@itemx set autogame
@itemx set crawford
@itemx set postcrawford
@itemx set autocrawford
@itemx set jacoby
@itemx set autodoubles @var{limit}
@itemx set score @var{points} @var{points}
@itemx show crawford
@itemx show postcrawford
@itemx show jacoby
@itemx show score
FIXME
@end table

@node Cube
@section The Doubling Cube
@cindex cube, doubling
@cindex doubling

@table @code
@kindex double
@kindex redouble
@kindex beaver
@kindex take
@kindex accept
@kindex drop
@kindex reject
@kindex set cube centre
@kindex set cube owner
@kindex set cube value
@item double
@itemx redouble
@itemx beaver
@itemx take
@itemx accept
@itemx drop
@itemx reject
@itemx set cube centre
@itemx set cube owner @var{player}
@itemx set cube value @var{points}
FIXME
@end table

@node Recording
@section Saving Games and Matches
@cindex recording matches
@cindex saving matches
@cindex matches, saving
@cindex games, saving

@table @code
@kindex save game
@kindex save match
@kindex load game
@kindex load match
@item save game @var{file}
@itemx save match @var{file}
@itemx load game @var{file}
@itemx load match @var{file}
FIXME
@end table

@node Analysis
@chapter Using @gnubg{} to Analyse Positions
@cindex analysis of positions
@cindex position analysis

@table @code
@kindex eval
@kindex rollout
@kindex set plies
@kindex set cache
@kindex show cache
@item eval [@var{id}]
@itemx rollout [@var{id}]
@itemx set plies @var{depth}
@itemx set cache @var{size}
@itemx show cache
FIXME
@end table

@node Databases
@chapter Position Databases
@cindex databases
@cindex position databases

@table @code
@kindex database dump
@kindex database evaluate
@kindex database generate
@item database dump
@itemx database evaluate
@itemx database generate
FIXME
@item database train
@itemx train database
FIXME pointer only
@end table

@node Training
@chapter Modifying @gnubg{}'s Neural Nets
@cindex training
@cindex neural nets, training

@table @code
@kindex save weights
@kindex load weights
@kindex database train
@kindex train database
@item save weights @var{file}
@itemx load weights @var{file}
@itemx database train
@itemx train database
FIXME
@end table

@node Frequently Asked Questions
@chapter Frequently Asked Questions
@cindex frequently asked questions
@cindex FAQ

@menu
* Where can I get GNU Backgammon?::
* How do I play a game?::
* gnubg.bd errors::
* gnubg.weights errors::
* Black and white board window::
@end menu

@node Where can I get GNU Backgammon?
@section Where can I get GNU Backgammon?
@cindex obtaining @t{gnubg}

Pre-release snapshots of GNU Backgammon are periodically made available
for FTP at @uref{ftp://alpha.gnu.org/gnu/gnubg/}.

If you want to experiment with the very latest code, the development
sources are kept in a CVS repository at
@uref{http://subversions.gnu.org/cgi-bin/cvsweb/gnubg/}; see the @gnubg{}
web page at @uref{http://www.gnu.org/software/gnubg/gnubg.html} for
instructions on checking out sources from the repository.

@node How do I play a game?
@section How do I play a game?
@cindex playing a game
@cindex moving chequers

Once you are running @gnubg{}, enter @kbd{new game} at the @samp{(gnubg)}
prompt to start a game against the computer opponent.  You should now
see a board (if an X display is available, @gnubg{} will use a graphical
board window; otherwise, it will display an ASCII board on your
terminal).  If @gnubg{} won the opening roll, it will have moved; you can
now type @kbd{roll} (or click on the dice below the board if you are
using X) to roll the dice yourself.  In either case, it will now be your
move; you should enter the moves for each chequer as pairs of numbers.
For instance, if you have rolled 3 and 1, you could type @kbd{8 5 6 5}
to move one chequer from the 8 point to the 5 point and another from
the 6 point to the 5 point.  Use @kbd{bar} to move from the bar, and
@kbd{off} to bear off.  If you are using the X board window, you
can also drag chequers around the board with mouse button 1.  Click on
the dice when you have finished.

@node gnubg.bd errors
@section I only see @samp{gnubg.bd: No such file or directory}.  What's wrong?
@vindex gnubg.bd
@cindex errors starting @t{gnubg}

The file @file{gnubg.bd} is the bearoff database that @gnubg{} uses to
evaluate endgame positions.  @gnubg{} will look for it first in the current
directory and then in the installed directory (@file{/usr/local/share/gnubg/}
by default).

The @gnubg{} distribution is set up to create @file{gnubg.bd} by itself
during compilation, but it can be a slow process (taking half an hour
or more, depending on the speed of your computer).  If you would rather
not wait to generate the database yourself, you can obtain a copy
via FTP from @uref{ftp://alpha.gnu.org/gnu/gnubg/gnubg.bd.gz}.

@node gnubg.weights errors
@section Now I get @samp{gnubg.weights: No such file or directory}.  What's that?
@vindex gnubg.weights
@cindex errors starting @t{gnubg}

The file @file{gnubg.weights} contains the trained neural net weights
for most of @gnubg{}'s position evaluators.  Like @file{gnubg.bd}, it should
be kept in either the current directory or the installed directory.

You should be able to obtain a copy from wherever you found the @gnubg{}
distribution.  Future releases of @gnubg{} will allow you to start without
any existing weights at all, if you want to train your own.

@node Black and white board window
@section The board window is shown in black and white and looks awful!  What's wrong?

If you see this problem, your X server is probably using a
@dfn{PseudoColor} visual, and is dynamically allocating colours
to clients from a limited colourmap.  On these types of displays, 
@gnubg{} tries to be a well-behaved client by using colours from the
default standard colourmap.  This will allow it to share colours
with other clients that use the same scheme, which will help them
all to use as many colours as possible without exhausting the
colourmap.

Unfortunately, not all X clients use standard colourmaps.  If other
clients have been run before @gnubg{} and allocated most of the colours,
then there may not be enough left for @gnubg{} to allocate a standard
colourmap.  If this happens, it will just take what it can get (which
in the worst case might be black and white only).  You can try to
avoid this problem by running @gnubg{} before other colour-hungry clients,
or by using the @file{xstdcmap} utility to install the default
standard colourmap early in your session while colours are still
available.  Depending on your hardware, you may be able to configure
your display to allow more colours, or use a @dfn{DirectColor} or
@dfn{TrueColor} visual which should resolve the problem.

Of course, if your X server can only display black and white (not even
shades of grey), then there's not much you can do!

@ignore
Hopefully nobody will ask this question, but I suppose it will happen...

@node Are the dice fair?
@end ignore

@node Command Index
@unnumbered Command Index
@printindex ky

@node Concept Index
@unnumbered Index
@printindex cp

@contents
@bye
