dnl  Autoconf script for gnubg, the backgammon player.
dnl To rebuild the `configure' script from this, execute the command
dnl     autoconf
dnl in the directory containing this script.
dnl
dnl by Gary Wong <gtw@gnu.org>, 1999, 2000, 2001.
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation, version 2.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

AC_REVISION($Revision$)
AC_INIT([GNU Backgammon],[0.15],[bug-gnubg@gnu.org],[gnubg])
AC_CONFIG_SRCDIR(gnubg.c)
AM_INIT_AUTOMAKE
AC_CONFIG_HEADERS([config.h])

if test -f config.options
then
  . ./config.options
fi


dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_LN_S
AC_PROG_YACC
AM_PROG_LEX
AC_PATH_X
AC_CHECK_PROG(CSOUND, csound, csound, true)
AC_CHECK_PROG(GNUPLOT, gnuplot, gnuplot)
AC_CHECK_PROG(PNGTOPNM, pngtopnm, pngtopnm)
AC_CHECK_PROG(PNMSCALE, pnmscale, pnmscale)
AC_CHECK_PROG(PNMTOPNG, pnmtopng, pnmtopng)
AC_CHECK_PROG(PNMTOPS, pnmtops, pnmtops)
AC_CHECK_PROG(PSTOPNM, pstopnm, pstopnm)
AC_CHECK_PROG(SRCONV, srconv, srconv, true)
AC_CHECK_PROG(TR, tr, tr)
AC_PROG_LIBTOOL

AM_YFLAGS='-d'
AC_SUBST(AM_YFLAGS)

dnl Darwin PPC builds should assume that darwin ports library
dnl and fink are being used by default (/sw). Darwin linker needs
dnl to specify binding, some math functions are in libmx
dnl (atanf etc). Since gnubg has a cpp component darwin is
dnl fussy about making sure stdc++ is included.

AC_MSG_CHECKING([for Darwin PPC])
case "$host" in
  powerpc-apple-darwin*)
    LDFLAGS="$LDFLAGS -L/sw/lib -bind_at_load"
    LIBS="$LIBS -lmx -lstdc++"
    darwinppc=yes;
    ;;
  *)
    darwinppc=no;
    ;;
esac

AC_MSG_RESULT([$darwinppc])
AM_CONDITIONAL(OS_DARWINPPC, test "$darwinppc" = yes)

AC_MSG_CHECKING([for Solaris])
case "$host" in
  *-*-solaris*)
    solaris=yes;
    ;;
  *)
    solaris=no;
    ;;
esac

AC_MSG_RESULT([$solaris])
AM_CONDITIONAL(OS_SOLARIS, test "$solaris" = yes)

dnl Shamelessly stolen taken from the libgnomecanvas configure.in
dnl with slight modifications. Check for Win32 Native platform
dnl then determine appropriate directive for the gcc compiler -
dnl choose between -fnative-struct or -mms-bitfields.

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    win32=yes
    ;;
  *)
    win32=no
    ;;
esac
AC_MSG_RESULT([$win32])
AM_CONDITIONAL(OS_WIN32, test "$win32" = yes)

# Ensure MSVC-compatible struct packing convention is used when
# compiling for Win32 with gcc. GTK+ uses this convention, so we must, too.
# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
# gcc2 uses "-fnative-struct".
if test x"$win32" = xyes; then
  if test x"$GCC" = xyes; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    if test -z "$ac_cv_prog_CC"; then
      our_gcc="$CC"
    else
      our_gcc="$ac_cv_prog_CC"
    fi
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
	if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
	  msnative_struct='-fnative-struct'
	fi
	;;
      *)
	if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
	  msnative_struct='-mms-bitfields'
	fi
	;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries will be incompatible with prebuilt GTK+ DLLs])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
  fi
fi


AC_DEFINE(_GNU_SOURCE,1,Enable GNU extensions on systems that have them.)

dnl Checks for libraries.
AC_CHECK_LIB(m, sqrt)
AC_ARG_WITH(readline,[  --with-readline         support fancy command line editing])
if test "$with_readline" != "no"; then
  for lib in termcap ncurses curses; do
    AC_CHECK_LIB($lib, tgetent, LIBS="-l$lib $LIBS"; break)
  done
  AC_CHECK_LIB(readline, readline)
  AC_CHECK_FUNCS(rl_completion_matches)
fi
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(gmp, mpz_import)
AC_CHECK_LIB(gmp, __gmpz_import)

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(sys/audioio.h fcntl.h sys/file.h gmp.h sys/ioctl.h langinfo.h limits.h sys/mman.h pwd.h sys/resource.h stropts.h sys/socket.h sys/soundcard.h sys/stat.h sys/time.h sys/types.h sys/uio.h unistd.h sys/wait.h sys/utsname.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T
AC_CHECK_TYPE(socklen_t,,
AC_DEFINE(socklen_t,int, [Define to `int' if <sys/socket.h> does not define.])
,[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif

])

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MMAP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(sigaction sigvec,break)
AC_CHECK_FUNCS(sigprocmask sigblock,break)
AC_CHECK_FUNCS(fork fstat getdtablesize getlogin getpid getpwuid gettimeofday isatty memmove random readv select setvbuf strchr setpriority nl_langinfo usleep)

AH_VERBATIM([signbit],
[#ifndef HAVE_MEMMOVE
/* define memmove as macro */
#define memmove(p0,p1,c) ( bcopy( (p1), (p0), (c) ) )
#endif])


AC_CHECK_FUNCS(acosf asinf atanf cosf lrint sinf tanf)

dnl use double version of the math functions if the float ones aren't
dnl available
if test "$ac_cv_func_acosf" != yes; then
AC_CHECK_FUNC(acos,AC_DEFINE(acosf,[acos],[use double version of acosf if float one isn't available]))
fi
if test "$ac_cv_func_asinf" != yes; then
AC_CHECK_FUNC(asin,AC_DEFINE(asinf,[asin],[use double version of asinf if float one isn't available]))
fi
if test "$ac_cv_func_atanf" != yes; then
AC_CHECK_FUNC(atan,AC_DEFINE(atanf,[atan],[use double version of atanf if float one isn't available]))
fi
if test "$ac_cv_func_cosf" != yes; then
AC_CHECK_FUNC(cos,AC_DEFINE(cosf,[cos],[use double version of cosf if float one isn't available]))
fi
if test "$ac_cv_func_sinf" != yes; then
AC_CHECK_FUNC(sin,AC_DEFINE(sinf,[sin],[use double version of sinf if float one isn't available]))
fi
if test "$ac_cv_func_tanf" != yes; then
AC_CHECK_FUNC(tan,AC_DEFINE(tanf,[tan],[use double version of tanf if float one isn't available]))
fi

AH_VERBATIM([lrint],
[#ifndef HAVE_LRINT
/* define lrint as macro if not available */
#define lrint(x) ((long) ((x)+0.5))
#endif])


AC_CACHE_CHECK(for signbit macro, ac_cv_func_signbit,
[AC_LINK_IFELSE([AC_LANG_PROGRAM([[#define _GNU_SOURCE 1
#include <math.h>]], [[return signbit(1.0f);]])],[eval "ac_cv_func_signbit=yes"],[eval "ac_cv_func_signbit=no"])])
if test "$ac_cv_func_signbit" = "yes"; then
  AC_DEFINE(HAVE_SIGNBIT,1,Define if you have a signbit() macro faster than a compare to 0.0.)
fi

AH_VERBATIM([signbit],
[#ifndef HAVE_SIGNBIT
/* define signbit as macro */
#define signbit(x) ( (x) < 0.0 )
#endif])

AC_SEARCH_LIBS(connect,socket,AC_DEFINE(HAVE_SOCKETS,1,Define if the system supports AF_LOCAL sockets.))
AC_SEARCH_LIBS(gethostbyname,nsl)
AC_SEARCH_LIBS(inet_aton,resolv)
AC_REPLACE_FUNCS(erf strdup)

dnl Check for GTK
no_gtk="yes"
no_board3d="yes"
no_gtkglext="yes"
AC_ARG_WITH(gtk,[  --with-gtk             use GTK+ 2.0])
AC_ARG_WITH(board3d,[  --with-board3d         compile with 3D boards])
if test "$with_gtk" != "no"; then
    AM_PATH_GTK_2_0(2.6.0)
    if test "$no_gtk" != "yes"; then
        dnl Check for Cairo
        PKG_CHECK_MODULES(CAIRO, [cairo >= 0.9.0], AC_DEFINE(HAVE_CAIRO,1,Define if you want to use libcairo), no_libcairo=yes)
        AC_DEFINE(USE_GTK,1,Define if you want to use GTK+ 2.0 or later.)
        AC_SUBST(GTKDATA)
        if test "$darwinppc" = "yes"; then
            GTK_LIBS="$GTK_LIBS -L$x_libraries -lX11"
        fi

        if test "$solaris" = "yes"; then
            GTK_LIBS="$GTK_LIBS -L$x_libraries -lX11"
        fi
        if test "$with_board3d" != "no"; then
            AM_PATH_GTKGLEXT_1_0()
            if test  "$no_gtkglext" != "yes"; then
                no_board3d=AC_DEFINE(USE_BOARD3D,1,[Define if you want to use the 3d boards])
            fi
        fi
    fi
fi
AM_CONDITIONAL(USE_GTK, test "$no_gtk" != "yes" )
AM_CONDITIONAL(USE_BOARD3D, test "$no_board3d" != "yes" )

AM_PATH_GLIB_2_0(2.0.0)
if test x"$no_glib" != "x"; then
   echo "*** You must have installed Glib1 or Glib2 in order to "
   echo "    compile GNU Backgammon"
   exit 1
fi


dnl
dnl Check for Python
dnl

AC_ARG_WITH(python,[  --with-python       provide Python script availabity inside gnubg])
if test "$with_python" = "no"; then
   no_python=yes
else
   AM_PATH_PYTHON(2.0)
   if test "$PYTHON" != ""; then
      AC_MSG_CHECKING(for python include)
      PYTHON_CFLAGS=-I`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('INCLUDEPY')"`
      AC_MSG_RESULT($PYTHON_CFLAGS)
      AC_SUBST(PYTHON_CFLAGS)
      dnl libraries
      AC_MSG_CHECKING(for python libraries)
      PYTHON_LIBS=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('LIBS'), distutils.sysconfig.get_config_var('LIBPL')+'/'+distutils.sysconfig.get_config_var('LIBRARY')"`
      AC_MSG_RESULT($PYTHON_LIBS)
      AC_SUBST(PYTHON_LIBS)
      dnl ld flags
      AC_MSG_CHECKING(for python linker flags)
      PYTHON_LDFLAGS=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('LINKFORSHARED')"`      
      AC_MSG_RESULT($PYTHON_LDFLAGS)
      AC_SUBST(PYTHON_LDFLAGS)
   else
      no_python=yes
   fi
   
fi

AM_CONDITIONAL(USE_PYTHON, test "$no_python" != "yes" )
if test "$no_python" != "yes"; then
   AC_DEFINE(USE_PYTHON,1,[Define if you want to use Python inside gnubg])
fi

PKG_CHECK_MODULES(LIBXML2, libxml-2.0, AC_DEFINE(HAVE_LIBXML2,1,Define if you want to use libxml2 to parse XML.), no_libxml2=yes)

AC_ARG_ENABLE(bearoff,[  --enable-bearoff=TYPE   specify bearoff database (TYPE=no,external,static)],bearoff_database="$enable_bearoff")

case "$bearoff_database" in
  "external")
    ;;
  "dynamic")
    # FIXME set up compilation of br1.c as a shared library
    AC_MSG_ERROR([--enable-bearoff=dynamic is not supported in this version of GNU Backgammon.])
    ;;
  "static")
    ;;
  "no")
    ;;
  *)
    if test "$ac_cv_func_mmap_fixed_mapped" = "yes"; then
      bearoff_database=external
    else
      bearoff_database=static
    fi
    ;;
esac

AM_CONDITIONAL(EXTERNAL_BR1, test "$bearoff_database" = "external")
AM_CONDITIONAL(COMPILE_BR1, test "$bearoff_database" = "static")

if test "$bearoff_database" = "static"; then
  AC_DEFINE(USE_BUILTIN_BEAROFF,1,[Define if you have a bearoff database to link to GNU Backgammon])
fi

AM_CONDITIONAL(CROSS_COMPILING, test "$cross_compiling" = "yes")

dnl AC_ARG_WITH(freetype,[  --with-freetype         compile with freetype2 support])
dnl if test "$with_freetype" != "no"; then

  AC_CHECK_FT2(,have_freetype=yes)
  if test "$have_freetype" = "yes"; then
    AC_DEFINE(HAVE_FREETYPE,1,[Define if you have the FreeType rendering library])
  fi
dnl fi
AM_CONDITIONAL(USE_FREETYPE, test "$have_freetype" = "yes")
dnl ---------------------------------------
dnl Sounds

AC_ARG_WITH(sound,[  --with-sound            use sounds with GNU Backgammon])

AM_CONDITIONAL(USE_SOUND, test "$with_sound" != "no" )
if test "$with_sound" != "no"; then

  AC_DEFINE(USE_SOUND,1,Define if you want to use sounds with GNU Backgammon)
  if test "$win32" != "yes"; then
     AM_PATH_ESD(,AC_DEFINE(HAVE_ESD,1,[Define if you have the ESD sound system]))
     AM_PATH_ARTSC(,AC_DEFINE(HAVE_ARTSC,1,[Define if you have ArtsC sound system]))
     AM_PATH_AUDIOFILE(0.2.0,AC_DEFINE(HAVE_AUDIOFILE,1,
                       [Define if you have the audiofile library]))
     AC_CHECK_LIB(audiofile,_af_ulaw2linear,AC_DEFINE(HAVE_AF_ULAW2LINEAR,1,[Define if your version of audiofile has _af_u2law2linear]))

     AC_ARG_ENABLE(nas,     [  --enable-nas            Enable NAS (Network Audio System) support],,enable_nas=no)

     if test "$enable_nas" != "no"; then
        AC_DEFINE(HAVE_NAS,1,Define if you have the NAS sound system)
        NAS_LIBS="-laudio -lXt"
        NAS_CFLAGS=
     fi

     if test "$darwinppc" = "yes"; then
	APPLE_QTIME_LIBS="-framework QuickTime"
     fi

  else
     AC_DEFINE(USE_WINMMSND,1,Define if you wish to use the Win32 WINMM sound system)
     WINMMSND_LIBS="-lwinmm"
     WINMMSND_CFLAGS=
  fi
fi

AM_CONDITIONAL(HAVE_WINMMSND, test "$win32" != "no" )
AC_SUBST(NAS_LIBS)
AC_SUBST(NAS_CFLAGS)
AC_SUBST(WINMMSND_LIBS)
AC_SUBST(WINMMSND_CFLAGS)
AC_SUBST(APPLE_QTIME_LIBS)

dnl Clocks

AC_ARG_WITH(timecontrol,[  --with-timecontrol	enable clocks])
AM_CONDITIONAL(USE_TIMECONTROL, test "$with_timecontrol" != "no" )
if test "$with_timecontrol" != "no"; then
  AC_DEFINE(USE_TIMECONTROL,1,Define if you want to use time controls (eg. clocks) with GNU Backgammon)
fi

dnl test for libpng

AC_CHECK_LIB(png,png_create_info_struct)
if test "$ac_cv_lib_png_png_create_info_struct" == yes; then
   PNG_LIBS='-lpng -lz'
fi

AC_SUBST(PNG_LIBS)

dnl Record installation paths.
AC_DEFINE_DIR([_DATADIR], [datadir],
          [Installation directory (used to determine PKGDATADIR below).])
AC_DEFINE([PKGDATADIR],[_DATADIR "/" PACKAGE],
          [The directory where the weights and databases will be stored.])

dnl internationalization macros
AM_GNU_GETTEXT([external])

if test "$USE_NLS" = "yes"; then
   if test -z "$MSGFMT"; then
      echo "You do not have msgfmt and other gettext utilities installed"
      echo "on your system. Please install the gettext package, or add"
      echo "the option --disable-nls to configure, e.g.:"
      echo "./configure --disable-nls"
      exit
   fi
fi

dnl enable SSE
AC_ARG_ENABLE( sse,[  --enable-sse     enable SSE for newer cpus], ,
enable_sse=no)
   SSE_CFLAGS=''
if test "$enable_sse" != "no"; then
  AC_DEFINE(USE_SSE_VECTORIZE,1,Define if you want to compile with
  SSE support)
  if test x"$GCC" = xyes; then
    SSE_CFLAGS="-msse"
  fi
fi
AC_SUBST(SSE_CFLAGS)


dnl pull in thread stuff
AC_SUBST(THREAD_LIBS)

dnl check for TRUE/FALSE
AC_CHECK_DECL(FALSE,,AC_DEFINE(FALSE,0,[Define FALSE]))
AC_CHECK_DECL(TRUE,,AC_DEFINE(TRUE,1,[Define TRUE]))


AC_CONFIG_FILES([Makefile doc/Makefile lib/Makefile met/Makefile po/Makefile.in po/Makefile m4/Makefile xpm/Makefile sounds/Makefile board3d/Makefile textures/Makefile scripts/Makefile flags/Makefile fonts/Makefile non-src/Makefile])
AC_OUTPUT
