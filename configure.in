dnl  Autoconf script for gnubg, the backgammon player.
dnl To rebuild the `configure' script from this, execute the command
dnl     autoconf
dnl in the directory containing this script.
dnl
dnl by Gary Wong <gtw@gnu.org>, 1999, 2000, 2001.
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation, version 2.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

AC_INIT(GNU Backgammon,0.13-devel,bug-gnubg@gnu.org,gnubg)
AC_CONFIG_SRCDIR(gnubg.c)
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)

if test -f config.options
then
  . ./config.options
fi

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CC_IEEE
AC_PROG_LN_S
AC_PROG_RANLIB
AC_CHECK_PROG(BISON, bison, bison, true)
AC_CHECK_PROG(CSOUND, csound, csound, true)
AC_CHECK_PROG(FLEX, flex, flex, true)
AC_CHECK_PROG(GNUPLOT, gnuplot, gnuplot)
AC_CHECK_PROG(PNGTOPNM, pngtopnm, pngtopnm)
AC_CHECK_PROG(PNMSCALE, pnmscale, pnmscale)
AC_CHECK_PROG(PNMTOPNG, pnmtopng, pnmtopng)
AC_CHECK_PROG(PNMTOPS, pnmtops, pnmtops)
AC_CHECK_PROG(PSTOPNM, pstopnm, pstopnm)
AC_CHECK_PROG(SRCONV, srconv, srconv, true)
AC_CHECK_PROG(TR, tr, tr)


AC_DEFINE(_GNU_SOURCE,1,Enable GNU extensions on systems that have them.)

dnl Checks for libraries.
AC_CHECK_LIB(m, sqrt)
AC_ARG_WITH(readline,[  --with-readline         support fancy command line editing])
if test "$with_readline" != "no"; then
  for lib in termcap ncurses curses; do
    AC_CHECK_LIB($lib, tgetent, LIBS="-l$lib $LIBS"; break)
  done
  AC_CHECK_LIB(readline, readline)
  AC_CHECK_FUNCS(rl_completion_matches)
fi
AC_ARG_WITH(gdbm,[  --with-gdbm             use GNU dbm for position databases])
if test "$with_gdbm" != "no"; then
  AC_CHECK_LIB(gdbm, gdbm_open)
  AC_CACHE_CHECK(for gdbm_errno, ac_cv_var_gdbm_errno,
[AC_TRY_LINK([#include <gdbm.h>], [return gdbm_errno;],
  eval "ac_cv_var_gdbm_errno=yes",
  eval "ac_cv_var_gdbm_errno=no")])
  if test "$ac_cv_var_gdbm_errno" = "yes"; then
    AC_DEFINE(HAVE_GDBM_ERRNO,1,Define if your GDBM library gdbm_errno works correctly.)
  fi
  AC_CACHE_CHECK(for _imp__gdbm_errno, ac_cv_var_imp_gdbm_errno,
[AC_TRY_LINK([#include <gdbm.h>], [extern gdbm_error *_imp__gdbm_errno; return (*_imp__gdbm_errno);],
  eval "ac_cv_var_imp_gdbm_errno=yes",
  eval "ac_cv_var_imp_gdbm_errno=no")])
  if test "$ac_cv_var_imp_gdbm_errno" = "yes"; then
    AC_DEFINE(HAVE_IMP_GDBM_ERRNO,1,Define if you can use _imp__gdbm_errno as a workaround.)
  fi
fi
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(gmp, mpz_import)
AC_CHECK_LIB(gmp, __gmpz_import)


dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(sys/audioio.h fcntl.h sys/file.h gmp.h sys/ioctl.h langinfo.h limits.h sys/mman.h pwd.h sys/resource.h stropts.h sys/socket.h sys/soundcard.h sys/stat.h sys/time.h sys/types.h sys/uio.h unistd.h sys/wait.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MMAP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(sigaction sigvec,break)
AC_CHECK_FUNCS(sigprocmask sigblock,break)
AC_CHECK_FUNCS(fork fstat getdtablesize getlogin getpid getpwuid gettimeofday isatty memmove random readv select setvbuf basename strchr setpriority nl_langinfo usleep)

AH_VERBATIM([signbit],
[#ifndef HAVE_MEMMOVE
/* define memmove as macro */
#define memmove(p0,p1,c) ( bcopy( (p1), (p0), (c) ) )
#endif])

dnl check if libgen.h should be included for basename
if test "$ac_cv_func_basename" = yes; then
   AC_CHECK_DECL(basename)
   if test "$ac_cv_have_decl_basename" = no; then
      AC_CHECK_HEADERS(libgen.h)
   fi
fi

AC_CHECK_FUNCS(acosf asinf atanf cosf lrint sinf tanf)

dnl use double version of the math functions if the float ones aren't
dnl available
if test "$ac_cv_func_acosf" != yes; then
AC_CHECK_FUNC(acos,AC_DEFINE(acosf,[acos],[use double version of acosf if float one isn't available]))
fi
if test "$ac_cv_func_asinf" != yes; then
AC_CHECK_FUNC(asin,AC_DEFINE(asinf,[asin],[use double version of asinf if float one isn't available]))
fi
if test "$ac_cv_func_atanf" != yes; then
AC_CHECK_FUNC(atan,AC_DEFINE(atanf,[atan],[use double version of atanf if float one isn't available]))
fi
if test "$ac_cv_func_cosf" != yes; then
AC_CHECK_FUNC(cos,AC_DEFINE(cosf,[cos],[use double version of cosf if float one isn't available]))
fi
if test "$ac_cv_func_sinf" != yes; then
AC_CHECK_FUNC(sin,AC_DEFINE(sinf,[sin],[use double version of sinf if float one isn't available]))
fi
if test "$ac_cv_func_tanf" != yes; then
AC_CHECK_FUNC(tan,AC_DEFINE(tanf,[tan],[use double version of tanf if float one isn't available]))
fi

AH_VERBATIM([lrint],
[#ifndef HAVE_LRINT
/* define lrint as macro if not available */
#define lrint(x) ((long) ((x)+0.5))
#endif])


AC_CACHE_CHECK(for signbit macro, ac_cv_func_signbit,
[AC_TRY_LINK([#define _GNU_SOURCE 1
#include <math.h>], [return signbit(1.0f);],
  eval "ac_cv_func_signbit=yes",
  eval "ac_cv_func_signbit=no")])
if test "$ac_cv_func_signbit" = "yes"; then
  AC_DEFINE(HAVE_SIGNBIT,1,Define if you have a signbit() macro faster than a compare to 0.0.)
fi

AH_VERBATIM([signbit],
[#ifndef HAVE_SIGNBIT
/* define signbit as macro */
#define signbit(x) ( (x) < 0.0 )
#endif])

AC_SEARCH_LIBS(connect,socket,AC_DEFINE(HAVE_SOCKETS,1,Define if the system supports AF_LOCAL sockets.))
AC_SEARCH_LIBS(gethostbyname,nsl)
AC_SEARCH_LIBS(inet_aton,resolv)
AC_REPLACE_FUNCS(erf strdup)

dnl Check for GTK
AC_ARG_WITH(gtk,[  --with-gtk              use GTK+ library and widgets])
AC_ARG_WITH(gtk2,[  --with-gtk2             use GTK+ 2.0])
AC_ARG_WITH(gtkextra,[  --with-gtkextra         use GtkExtra widgets])
if test "$with_gtk" = "no"; then
  no_gtk=yes
else
  if test "$with_gtk2" != "no"; then
    AM_GTK2
  else
    no_gtk=yes
  fi
  if test "$no_gtk" = "yes"; then
    no_gtk2=yes
    AM_PATH_GTK(1.2.0)
  fi
fi
AM_CONDITIONAL(USE_GTK, test "$no_gtk" != "yes" )
if test "$no_gtk" = "yes"; then
  AC_PATH_XTRA
  AM_CONDITIONAL(USE_EXT, test "$no_x" != "yes" )
  if test "$no_x" != "yes"; then
    AC_DEFINE(USE_EXT,1,Define if you want to use the ext toolkit and widgets.)
  fi
else
  AM_CONDITIONAL(USE_EXT, false)
  AC_DEFINE(USE_GTK,1,Define if you want to use the GTK+ toolkit and widgets.)
  if test "$no_gtk2" != "yes"; then
    AC_DEFINE(USE_GTK2,1,Define if you want to use GTK+ 2.0 or later.)
  fi
  AC_ARG_ENABLE(train-menu,[  --enable-train-menu     show GTK+ neural network training options],AC_DEFINE(ENABLE_TRAIN_MENU,1,[Define if you want a GTK+ neural network training menu]))
  ac_save_CPPFLAGS="$CPPFLAGS"
  ac_save_CFLAGS="$CFLAGS"
  ac_save_LIBS="$LIBS"
  CPPFLAGS="$CPPFLAGS $GTK_CFLAGS"
  CFLAGS="$CFLAGS $GTK_CFLAGS"
  LIBS="$LIBS $GTK_LIBS"
  AC_CHECK_HEADERS(gdk/gdkx.h)
  AC_CHECK_FUNCS(gtk_option_menu_get_history)
  if test "$with_gtkextra" != "no"; then
    if test "$no_gtk2" != "yes"; then
      PKG_CHECK_MODULES(GTKEXTRA, gtkextra-2.0, AC_DEFINE(USE_GTKEXTRA,2,[Define to 1 or 2 if you have the gtkextra-1 or -2 library, as appropriate.]),nada=)
    else
      AC_CHECK_LIB(gtkextra,gtk_sheet_new,gtkextra_1=yes)
      if test "$gtkextra_1" = "yes"; then
        AC_DEFINE(USE_GTKEXTRA,1)
	GTKEXTRA_LIBS=-lgtkextra
	AC_SUBST(GTKEXTRA_LIBS)
      fi
    fi
  fi
  CPPFLAGS="$ac_save_CPPFLAGS"
  CFLAGS="$ac_save_CFLAGS"
  LIBS="$ac_save_LIBS"
  GTKDATA=gnubg.gtkrc
  AC_SUBST(GTKDATA)
  AM_PATH_LIBART(,AC_DEFINE(HAVE_LIBART,1,[Define if you have the art library]))
fi


AH_VERBATIM([USE_GUI],
[#if USE_EXT || USE_GTK
#define USE_GUI 1
#endif])

AC_ARG_WITH(guile,[  --with-guile            use the Guile extensibility language])
if test "$with_guile" = "no"; then
  no_guile=yes
else
  AM_GUILE
  if test "$with_guile" != ""; then
    GUILE_LIBS="$with_guile"
  fi
fi

if test "$no_guile" != "yes"; then
  AC_DEFINE(USE_GUILE,1,Define if you want to use the Guile extensibility language.)
  ac_save_CPPFLAGS="$CPPFLAGS"
  ac_save_CFLAGS="$CFLAGS"
  ac_save_LIBS="$LIBS"
  CPPFLAGS="$CPPFLAGS $GUILE_CFLAGS $GTK_CFLAGS"
  CFLAGS="$CFLAGS $GUILE_CFLAGS $GTK_CFLAGS"
  LIBS="$LIBS $GUILE_LIBS $GTK_LIBS"
  AC_CHECK_FUNCS(scm_set_current_module scm_select_module)
  AC_CHECK_HEADERS(guile-gtk.h)
  if test "$gtk2" != "yes"; then
    AC_CHECK_LIB(guilegtk-1.2, sgtk_wrap_gtkobj,
[AC_DEFINE_UNQUOTED(HAVE_LIBGUILEGTK_1_2,0,
   [Define if you have the guilegtk-1.2 library (-lguilegtk-1.2).])
GUILE_LIBS="-lguilegtk-1.2 $GUILE_LIBS"
])
  fi
  CPPFLAGS="$ac_save_CPPFLAGS"
  CFLAGS="$ac_save_CFLAGS"
  LIBS="$ac_save_LIBS"
  GUILEDATA=gnubg.scm
  AC_SUBST(GUILEDATA)
fi

PKG_CHECK_MODULES(LIBXML2, libxml-2.0, AC_DEFINE(HAVE_LIBXML2,1,Define if you want to use libxml2 to parse XML.), no_libxml2=yes)

AC_ARG_ENABLE(bearoff,[  --enable-bearoff=TYPE   specify bearoff database (TYPE=no,external,static)],bearoff_database="$enable_bearoff")

case "$bearoff_database" in
  "external")
    ;;
  "dynamic")
    # FIXME set up compilation of br1.c as a shared library
    AC_MSG_ERROR([--enable-bearoff=dynamic is not supported in this version of GNU Backgammon.])
    ;;
  "static")
    ;;
  "no")
    ;;
  *)
    if test "$ac_cv_func_mmap_fixed_mapped" = "yes"; then
      bearoff_database=external
    else
      bearoff_database=static
    fi
    ;;
esac

AM_CONDITIONAL(EXTERNAL_BR1, test "$bearoff_database" = "external")
AM_CONDITIONAL(COMPILE_BR1, test "$bearoff_database" = "static")

if test "$bearoff_database" = "static"; then
  AC_DEFINE(USE_BUILTIN_BEAROFF,1,[Define if you have a bearoff database to link to GNU Backgammon])
fi

AM_CONDITIONAL(CROSS_COMPILING, test "$cross_compiling" = "yes")
AM_CONDITIONAL(XML_MANUAL, test "$no_libxml2" != "yes" -a "$gtk2" = "yes")

AC_CHECK_FT2(,have_freetype=yes)
if test "$have_freetype" = "yes"; then
  AC_DEFINE(HAVE_FREETYPE,1,[Define if you have the FreeType rendering library])
fi
AM_CONDITIONAL(USE_FREETYPE, test "$have_freetype" = "yes")

dnl ---------------------------------------
dnl Look for libraries needed for 3D boards

if test "$no_gtk" != "yes"; then
   AM_PATH_GTKGLEXT_1_0(,AC_DEFINE(HAVE_GTKGLEXT,1,
                                   [Define if you have GtkGLExt]))
   if test "$no_gtkglext" != "yes"; then
      dnl check for GtkGLExt
      AC_DEFINE(USE_BOARD3D,1,[Define if you want to use the 3d boards])
      dnl check for FTGL (dependent on freetype)
      if test "$have_freetype" = "yes"; then
         dnl fixme: write a test...
         AC_DEFINE(HAVE_FTGL,1,[Define if you have the FTGL library])
         FTGL_LIBS="-lftgl"
	 AC_SUBST(FTGL_LIBS)
      fi
   fi
fi
AM_CONDITIONAL(USE_BOARD3D,test "$no_gtkglext" != "yes")

dnl ---------------------------------------
dnl Sounds

AC_ARG_WITH(sound,[  --with-sound            use sounds with GNU Backgammon])

AM_CONDITIONAL(USE_SOUND, test "$with_sound" != "no" )
if test "$with_sound" != "no"; then

  AC_DEFINE(USE_SOUND,1,Define if you want to use sounds with GNU Backgammon)

  AM_PATH_ESD(,AC_DEFINE(HAVE_ESD,1,[Define if you have the ESD sound system]))
  AM_PATH_ARTSC(,AC_DEFINE(HAVE_ARTSC,1,[Define if you have ArtsC sound system]))
  AM_PATH_AUDIOFILE(0.2.0,AC_DEFINE(HAVE_AUDIOFILE,1,
                    [Define if you have the audiofile library]))

  AC_ARG_ENABLE(nas,     [  --enable-nas            Enable NAS (Network Audio System) support],,enable_nas=no)

  if test "$enable_nas" != "no"; then
     AC_DEFINE(HAVE_NAS,1,Define if you have the NAS sound system)
     NAS_LIBS="-laudio -lXt"
     NAS_CFLAGS=
  fi

fi

AC_SUBST(NAS_LIBS)
AC_SUBST(NAS_CFLAGS)

dnl test for libpng

AC_CHECK_LIB(png,png_create_info_struct)
if test "$ac_cv_lib_png_png_create_info_struct" == yes; then
   PNG_LIBS='-lpng -lz'
fi

AC_SUBST(PNG_LIBS)

dnl Record installation paths.
AC_DEFINE_DIR(_DATADIR, datadir)
AC_DEFINE([_DATADIR], datadir,
          [Installation directory (used to determine PKGDATADIR below).])
AC_DEFINE([PKGDATADIR],[_DATADIR "/" PACKAGE],
          [The directory where the weights and databases will be stored.])

dnl internationalization macros
AM_GNU_GETTEXT

if test "$USE_NLS" = "yes"; then
   if test -z "$MSGFMT"; then
      echo "You do not have msgfmt and other gettext utilities installed"
      echo "on your system. Please install the gettext package, or add"
      echo "the option --disable-nls to configure, e.g.:"
      echo "./configure --disable-nls"
      exit
   fi
fi



dnl check for TRUE/FALSE
AC_CHECK_DECL(FALSE,,AC_DEFINE(FALSE,0,[Define FALSE]))
AC_CHECK_DECL(TRUE,,AC_DEFINE(TRUE,1,[Define TRUE]))

dnl define WIN32 for wintendo systems

os=`config.guess | sed 's/.*-//'`
if test "$os" = "mingw32"; then
  AC_DEFINE(WIN32,1,[Define if you use wintendo])
fi

AC_OUTPUT(Makefile doc/Makefile ext/Makefile lib/Makefile met/Makefile po/Makefile.in po/Makefile  intl/Makefile m4/Makefile xpm/Makefile sounds/Makefile board3d/Makefile)
