
@node Bearoff databases
@chapter Bearoff databases

This section describes what kind of bearoff databases you can use with
@gnubg{} as well as how you may obtain these.

@menu
* Introduction to bearoff databases::
* Bearoff databases with GNU Backgammon::
* Obtaining bearoff databases::
@end menu

@node Introduction to bearoff databases
@section Introduction to bearoff databases

There are two kind of bearoff databases: two-sided (exact) bearoff databases
or one-sided (approximative) bearoff databases. 

@subsection Two-sided bearoff databases

Two-sided bearoff databases contain exact probabilities or equities
for winning. 

For example, for less than 6 chequers inside the home quadrant, each
side has 924 different positions, for a total of 924 * 924 = 853,776
positions possible. The bearoff database will contain the exact
winning probability for each of these 853,776 positions. Typically,
the database also includes cubeful equities for money game. Cubeful
equities for match play is generally not included as it is dependent
on match score and cube level. 

Consider the following position:

@example
 GNU Backgammon  Position ID: CgAAEAEAAAAAAA
                 Match ID   : cIkMAAAAAAAA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O: gnubg
 |                  |   |          O  O    | OOO 0 points
 |                  |   |                  | OOO
 |                  |   |                  | OOO
 |                  |   |                  | OO
 |                  |   |                  | OO
v|                  |BAR|                  |     (Cube: 1)
 |                  |   |                  | XX
 |                  |   |                  | XX
 |                  |   |                  | XXX
 |                  |   |                  | XXX On Roll
 |                  |   |    X        X    | XXX 0 points
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X: jth
@end example

Using a two-sided bearoff database will yield that player X has 67.1%
cubeless chance of winning. The database also gives cubeful money
equities of +0.3441, +0.3210, and +0.1605 for X owning cube, centred
cube, and O owning cube, respectively. So it's an initial 
double since +0.3210 >= 2 * +0.1605. However it's not a redouble since
+0.3441 >= 2 * 0.1605. 

The major problem with two-sided databases is that the size increases
incredible fast with the number of points and chequers:

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Number of positions}
@item 6         @tab 6        @tab 853,776
@item 7         @tab 6        @tab 2,944,656
@item 8         @tab 6        @tab 9,018,009
@item ...
@item 15        @tab 6        @tab 2,944,581,696
@item ...
@item 15        @tab 24       @tab 18,528,584,051,601,162,496
@end multitable

@gnubg{} stores the equity for each position with a precision of
approximately 0.00003 which requires 2 bytes of storage. Hence,
storing one cubeless and three cubeful equities requires a total of 8
bytes per position. This gives the following storage requirements for
n chequers inside the home quadrant:

@multitable @columnfractions 0.2 0.2 0.2 0.2
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Number of positions}
@tab @strong{Size/MB}
@item 6         @tab 6        @tab 853,776        @tab 6 
@item 7         @tab 6        @tab 2,944,656      @tab 22 
@item 8         @tab 6        @tab 9,018,009      @tab 68
@item 9         @tab 6        @tab 25,050,025     @tab 191
@item 10        @tab 6        @tab 64,128,064     @tab 489
@item 11        @tab 6        @tab 153,165,376    @tab 1,168
@item 12        @tab 6        @tab 344,622,096    @tab 2,629
@item 13        @tab 6        @tab 736,145,424    @tab 5,616
@item 14        @tab 6        @tab 1,502,337,600  @tab 11,461
@item 15        @tab 6        @tab 2,944,581,696  @tab 22,465
@end multitable

For the typical user the limit is probably 10 or 11 chequers unless
she owns vast amounts of disk space.
Also, the time to generate these databases increases
proportionally with the size. The 15 chequer database takes at least
3,500 times the time it takes to generate the 6 point database. For
example, on the author's 1GHz Pentium III it takes approximately 6
minutes to generate the 6 
points database, hence it would take at least 21,000 minutes or
approximately 15 days to generate the 15 point database on the same
computer.

@subsection One-sided bearoff databases

Instead of looking at both player's positions simultaneously large
savings can be obtained by looking at each side independently. For
each position we tabulate the probability P(n) what the player will
bear all chequers off in n rolls; P(n) is the one sided bearoff
distribution. Assume player 0 and player 1 has one sided bearoff
distributions P0(n) and P1(n), respectively. The chance of player 0
bearing all chequers off before player 1 is:

@tex
$$ p = \sum_{i=0}^{\infty} P_0(i) \left( \sum_{j=i}^{\infty} P_1(j) \right) $$
@end tex
@ifnottex
p = sum(i=0 to infinity) P0(i) [ sum(j=i to infinity) P1(j) ]
@end ifnottex

For example, consider the following position:

@example
 GNU Backgammon  Position ID: 2x0AAOi2AQAAAA
                 Match ID   : cAkAAAAAAAAA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O: gnubg
 |                  |   |       O  O  O  O | O   0 points
 |                  |   |       O  O  O  O | O
 |                  |   |       O  O       | O
 |                  |   |                  | O
 |                  |   |                  | O
v|                  |BAR|                  |     (Cube: 1)
 |                  |   |                  | X
 |                  |   |                  | X
 |                  |   |             X    | X
 |                  |   |    X  X  X  X    | X   On roll
 |                  |   |    X  X  X  X  X | X   0 points
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X: jth
@end example

The one sided bearoff distributions are
@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Rolls} @tab @strong{jth} @tab @strong{gnubg}
@item 3 @tab  1.917% @tab  2.811%
@item 4 @tab 18.749% @tab 28.403%
@item 5 @tab 44.271% @tab 50.307%
@item 6 @tab 32.998% @tab 18.114%
@item 7 @tab  2.029% @tab  0.363%
@item 8 @tab  0.037% @tab  0.002%
@end multitable

Applying the formula above gives:

@iftex
@math{1.917\% \times 100\% + 18.749\% \times 97.189\% + 44.271\%
\times 68.786\% \dots + 0.037\% \times 0.02\% = 56.7\%}
@end iftex
@ifnottex
@math{1.917% * 100% + 18.749% * 97.189% + 44.271% * 68.786% ... +
0.037% * 0.02% = 56.7%}
@end ifnottex

The cubeless gwc's calculated from one sided bearoff distributions are
usually quite good, although no thorough investigations have been
performed so far. Although the databases are one sided they can also
give correct moves in ``desperation'' scenarios.

By storing the probability to bearoff at least one chequer, it's also
possible to calculate gammon probabilities, as the chance of being
gammoned is the probability that my opponent bears all chequers off
before I bear at least one chequer off. Analogously, it's possible to
calculate the chance of gammoning the opponent.

The storage requirements are much smaller than for the equivalent two
sided databases.

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Number of positions}
@item 15        @tab 6        @tab 54,264
@item 15        @tab 7        @tab 170,544
@item 15        @tab 8        @tab 490,314
@item 15        @tab 9        @tab 1,307,504
@item 15        @tab 10       @tab 3,268,870
@item 15        @tab 11       @tab 7,726,160
@item 15        @tab 12       @tab 17,383,860
@item 15        @tab 13       @tab 37,442,160
@item 15        @tab 14       @tab 77,558,760
@item 15        @tab 15       @tab 155,117,250       
@item 15        @tab 16       @tab 300,540,195
@item 15        @tab 17       @tab 565,722,720
@item 15        @tab 18       @tab 1,037,158,320
@end multitable

For example, 15 chequers on 6 points is only 54,264 positions for the
one sided bearoff database compared to 294,458,696 positions for the
equivalent two sided bearoff database. However, for each position we
need to store an array of probabilities. For example, for 15 chequers
on the 18 point we have to store 15 non-zero probabilities compared to
only one in the two sided bearoff database. The table below gives
approximate database sizes for @gnubg{}'s one sided databases (both
bearoff and gammon distributions):

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{Size in MB}
@item 15        @tab 6        @tab 1.4
@item 15        @tab 7        @tab 5
@item 15        @tab 8        @tab 15
@item 15        @tab 9        @tab 42
@item 15        @tab 10       @tab 112
@item 15        @tab 11       @tab 284
@item 15        @tab 12       @tab 682
@item 15        @tab 13       @tab approx 1,700 
@item 15        @tab 14       @tab approx 4,300
@item 15        @tab 15       @tab approx 10,700
@item 15        @tab 16       @tab approx 26,700
@item 15        @tab 17       @tab approx 66,700
@item 15        @tab 18       @tab approx 166,000
@end multitable

So, the practical limit is probably around the 11 to 13 point,
depending on the disk space available.

@gnubg{} can generate one sided bearoff database where the exact
bearoff distribution is approximated by a normal distribution: instead
of storing up to 15 or 20 non-zero probabilities only two parameters
characterising the normal distribution has to be stored: the mean and
the variance. The approximative distributions yields reasonably
accurate gwc's and gammon probabilities compared to the exact one
sided bearoff database. The size of the these approximative databases
are roughly a quarter of the exact one, hence the limit is around the
13 to 15 point depending on the disk space available. The option to
use approximative bearoff databases is work in progress!

As with the two sided bearoff databases it can be a rather time
consuming task to generate one sided databases. The 10 point database
takes approximately 2 hours to generate on the author's 1 GHz Pentium
III. The 12 point database may more than one day!

@subsection Hypergammon databases

@gnubg{} can also play Hypergammon; a variant of backgammon with only
3 chequers, but with counting gammons and backgammons. The starting
position is

@example
 GNU Backgammon  Position ID: AACgAgAAKgAAAA
                 Match ID   : cAkAAAAAAAAA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O: gnubg
 |                  |   |          X  X  X |     0 points
 |                  |   |                  |
 |                  |   |                  |
 |                  |   |                  |
 |                  |   |                  |
v|                  |BAR|                  |     (Cube: 1)
 |                  |   |                  |
 |                  |   |                  |
 |                  |   |                  |
 |                  |   |                  |     On roll
 |                  |   |          O  O  O |     0 points
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X: jth
Pip counts: O 69, X 69
@end example

@gnubg{} can also play the two-chequer and one-chequer variations as
well. Although it looks very simple to play, Hypergammon is in fact
quite difficult to play correctly.

There are 3,276 possible ways to distribute 3 (or less) chequers over 25 points
(the 24 points plus the bar). This gives a total of 10,732,176
possible two sided positions. However, many these are illegal:

@multitable @columnfractions 0.25 0.25
@item @strong{Position type}  
@tab @strong{Number of positions}   
@item Game over         @tab 6,551
@item Race (no contact) @tab 587,926
@item Contact           @tab 7,365,427
@item Illegal positions @tab 2,772,272
@item Total             @tab 10,732,176
@end multitable

So there is close to 8 million legal positions for Hypergammon. Since
this is a relative small number it's possible to tabulate the game
winning chance, cubeless equity, or cubeful equities for all
positions. 

Due to the contact positions it is not possible to generate such a
database in one run; instead the process is iterative: (a) ``guess''
equities for the 8 million positions, (b) use these equities to calculate 1-ply
equities for all positions, and (c) if the equities change
significantly then go back to step (c).


@node Bearoff databases with GNU Backgammon
@section Bearoff databases with GNU Backgammon

@gnubg{} works with both one sided and two sided bearoff
databases. Currently, it works with up to four databases; two of each
kind. Two of the databases are read into memory for fast access, but
of course these are limited to very small databases.

The one sided database kept in memory is either built-in or stored on
disk as @file{gnubg_os0.bd} depending on the compile time option
@code{USE_BUILTIN_BEAROFF}, which is most easily controlled by passing
the option @code{--enable-bearoff=TYPE} where @code{type} is either
@code{no}, @code{static}, or @code{external}. @gnubg{} can also work
without this database, but will generate a heuristic version every
time the program starts. This can take up to several minutes,
depending on the speed of your computer.

We recommend using an external file as the executable will be smallest
possible, and several running instances of gnubg will share the memory
if your system has mmap (memory mapping of files). 

The standard size is 15 chequers on 6 points, but you may
generate a larger one, but remember that the @gnubg{} will read the
file into memory. The default size should be adequate for all
purposes.

The two sided database kept in memory (@file{gnubg_ts0.bd}) is
optional and you may generate or download your own (see next section
for details). @gnubg{} will use the exact cubeful equities in the
databases for cubeful money game evaluations and for truncation in
money game rollouts (see (insert ref to rollout chapter)). 

@gnubg{} cannot directly use the equities for match play as the
equities, in general, depend on the match score, cube value, and cube
ownership. However, it's possible to calculate the cube efficiency
parameter X from Rick Janowski's formulae from the cubeful money
equities that are available. This is very important as the cube
efficiency parameter often is very different from the range 0.6 and
0.68 that @gnubg{} uses for long bearoffs and contact play,
respectively. The calculated value of X is used in 
match play generalisation of Janowski's to yield cubeful match winning
chances. @gnubg{} uses a similar heuristic for Hypergammon (see below).


The two databases (@file{gnubg_os.bd} and
@file{gnubg_ts.bd}) are kept on disk and accessed when
needed. See next section for details on how to generate or download
your own.

A few words of caution: the race neural net in @gnubg{} is believed to
be quite good, so it may not be worthwhile to generate large one sided
database. Joseph Heled has published a comparison of chequer play
decisions between the 0.13 race net and a one sided bearoff database
for 15 chequers on 12 points. A total of 34,165 positions were
examined, and the error rates were quite small:

@multitable @columnfractions 0.2 0.2 0.2 0.2
@item @strong{Ply}
@tab @strong{Error rate/positions}
@tab @strong{Number of errors}
@tab @strong{Percentage of positions with errors}
@item 0   @tab 0.00025   @tab 3231   @tab 9.5
@item 1   @tab 0.00032   @tab 3418   @tab 10.0
@item 2   @tab 0.00002   @tab 1255   @tab 3.7
@end multitable


In order to play or analyse Hypergammon matches or session you need
the databases @file{hyper1.bd}, @file{hyper2.bd}, and @file{hyper3.bd}
for 1-chequer, 2-chequer, and 3-chequer (normal) Hypergammon. These
databases contain the cubeless game winning chance, gammon, and
backgammon probabilities (based on cubeless money play without Jacoby
rule), and cubeful equities for money game: centered cube (with Jacoby
rule), centered cube (without Jacoby rule), owned cube, and
unavailable cube. For match play @gnubg{} uses a similar heuristic to
the usage of the two-sided bearoff database in match play for normal
backgammon: the cube efficiency parameter X from Janowski's formulae
are estimated from the cubeful money equities.

Each position requires 28 bytes of storage. For easy indexing of the
file @gnubg{} also use storage for the illegal positions. The table
below shows the size of the Hypergammon databases.

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Number of chequers}  
@tab @strong{Number of positions}   
@tab @strong{Size of file/bytes}
@item 1   @tab 676         @tab 19,968
@item 2   @tab 123,201     @tab 3,449,668
@item 3   @tab 10,732,176  @tab 300,500,968
@end multitable



@node Obtaining bearoff databases
@section Obtaining bearoff databases

@subsection Generate your own

@gnubg{} is supplied with a program @file{makebearoff} that is used to
generate bearoff databases. 

To generate one sided database issue

@example
makebearoff -o 10 -f gnubg_os.bd
@end example

to generate the one sided 10 point database. The program
@file{makebearoff} uses a cache to store previously generated
positions. You may set the cache size with the @command{-s size}
option, e.g.,

@example
makebearoff -o 10 -s 123456789 -f gnubg_os.bd
@end example

to use 123,456,789 bytes of memory for cache size. In general, if the
cache size is less than the size of the database to be generated, then
extra time is needed to generate the bearoff database because some
positions may have to be calculated several times.

@file{makebearoff} can also reuse previously generated databases, so
if you already had generated the 9 point database you can reuse it:

@example
mv gnubg_os.bd gnubg_os9.bd
makebearoff -o 10 -O gnubg_os9.bd -f gnubg_os.bd
@end example

Note that @file{makebearoff} requires temporary disk space to generate
both one sided and two sided databases. In general, twice the disk
space of the database to be generated is needed. 


To generate a two sided database issue

@example
makebearoff -t 6x8 -f gnubg_ts.bd
@end example

This example will generate the 8 chequers on 6 points database. Again,
it's possible to adjust the amount of memory with the @command{-s}
option. It's recommended to set the cache size to the maximum amount of memory
available (although there is no need to set it beyond the size of the
bearoff database to be generated).


Other options for @file{makebearoff} are available, see
@command{makebearoff --help} for the complete set.


At compile time the built-in one sided
bearoff database is generated with the command

@example
makebearoff -o 6 | makebearoff1 -o br1.c
@end example

which generated a 6 point one sided bearoff database. The database is
piped into makebearoff1 that generates the C code for the
database. The resulting @file{br1.c} is more than 8MB, so it's not
distributed with the source for @gnubg{}. 


The accompanying program @file{makehyper} is used to generate
databases for Hypergammon. For example, to generate the 3-chequer
database issue the command

@example
makehyper -c 3 -f hyper3.bd
@end example

Since the generation is @emph{very} time consuming @file{makehyper}
will generate a checkpoint file (in the example above:
@file{hyper1.bd.tmp}) that can be used to restart the calculation if
needed by using the @command{-r} option. You can also change the
default convergence threshold of 0.00001 if you're happy with less
accurate equities. To generate the 3 chequer database you need
approximately 400 MB of free memory. On a 2.4 GHz box with 512 MB of
RAM the calculation ran for 58 iterations of 3000 seconds each, i.e., a
total of 48 hours!

See @command{makehyper --help} for the complete set of available
options. 

@subsection Download

You may download the two sided database with 6 chequers on 6 points from
@uref{ftp://alpha.gnu.org/gnu/gnubg/gnubg_ts0.bd.gz} and the one sided
database with 15 chequers 6 points from
@uref{ftp://alpha.gnu.org/gnu/gnubg/gnubg_os0.bd.gz}.

Later, other databases may be available for download or it may be
possible to purchase these on CDROM or DVD for a nominal fee. 

@subsection Verification of databases

To verify that your generated or downloaded bearoff database is
correct, the table below lists the MD5 checksums for a number of
possible databases.

@subsubsection One-sided bearoff databases (compressed)

The table below contains the MD5 checksums for the compressed one
sided bearoff databases, i.e., databases generated with default options.

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{MD5 checksum}
@item 15        @tab 1        @tab @code{c789f049ec98ce4e307b471257999f39}
@item 15        @tab 2        @tab @code{b6e61c1625ae4b3b164e93ab064192b9}
@item 15        @tab 3        @tab @code{346dae6139ccb4b227c534373e5c52e4}
@item 15        @tab 4        @tab @code{653255f5f9f22fd50277f7ff25b2a343}
@item 15        @tab 5        @tab @code{2064f9a56b23117d053a573c96a92fa2}
@item 15        @tab 6        @tab @code{3dc7b833c4670849cee00479a9e21b49}
@item 15        @tab 7        @tab @code{67235c8e0ee152df5daf36cbeae5b3c2}
@item 15        @tab 8        @tab @code{a4acbb5c7e9e1f08e561afe0af934e5c}
@item 15        @tab 9        @tab @code{9c4ddab4e51c3e668c9c97b8f8768dbc}
@item 15        @tab 10       @tab @code{81b3898f06bbd08ee8295a839251a10a}
@item 15        @tab 11       @tab @code{78ecb4be86dab6af8755ea4063d50fb6}
@item 15        @tab 12       @tab @code{770fcff48894a96ebb2249343ef94866}
@item 15        @tab 13       @tab not available
@item 15        @tab 14       @tab not available
@item 15        @tab 15       @tab not available
@item 15        @tab 16       @tab not available
@item 15        @tab 17       @tab not available
@item 15        @tab 18       @tab not available
@end multitable


@subsection Two-sided bearoff databases (with cubeless and cubeful equities)

The table below contains the MD5 checksums for the default two
sided bearoff databases.

@multitable @columnfractions 0.25 0.25 0.25
@item @strong{Chequers}  
@tab @strong{Points}   
@tab @strong{MD5 checksum}
@item 1         @tab 6        @tab @code{7ed6f8e7fce16ea2b80e07a4a516653c}
@item 2         @tab 6        @tab @code{e9d760bf213841c285245ed757a52f4d}
@item 3         @tab 6        @tab @code{9d67da3db32ad4720cc38eecf9a67967}
@item 4         @tab 6        @tab @code{9156f37032d1d4b0352a41186e632dfc}
@item 5         @tab 6        @tab @code{0db19ab08feae1feb33ddbd709479f62}
@item 6         @tab 6        @tab @code{44b6040b49b46cb9dd2ce8caa947044d}
@item 7         @tab 6        @tab @code{9eb8b042d4d2ddf8d40e74a892745ad5}
@item 8         @tab 6        @tab @code{fcdbbc80b7ef84ddc81b839d0f26bed1}
@item 9         @tab 6        @tab @code{a11b2d410d51401143d05e73f9ffac15}
@item 10        @tab 6        @tab @code{12dc70c86f356d06bc96ee38dee40c62}
@item 11        @tab 6        @tab not available
@item 12        @tab 6        @tab not available
@item 13        @tab 6        @tab not available
@item 14        @tab 6        @tab not available
@item 15        @tab 6        @tab not available
@end multitable


@subsubsection Two-sided databases for Hypergammon

As the generation of the Hypergammon databases are an iterative
process it's not possible to give MD5 checksum for these, as it depend
heavily on your convergence threshold, the number of restarts, and
rounding errors.

Below is a random position from the database. The equities and
percentages in your own database should be very similiar (if not identical):

@example
 GNU Backgammon  Position ID: ADAAAQAkIAAAAA
                 Match ID   : cAkAAAAAAAAA
 +13-14-15-16-17-18------19-20-21-22-23-24-+     O: gnubg
 |       X     X    |   |                X |     0 points
 |                  |   |                  |
 |                  |   |                  |
 |                  |   |                  |
 |                  |   |                  |
v|                  |BAR|                  |     (Cube: 1)
 |                  |   |                  |
 |                  |   |                  |
 |                  |   |                  |
 | O                |   |                  |     On roll
 | O                |   |             O    |     0 points
 +12-11-10--9--8--7-------6--5--4--3--2--1-+     X: jth

             Player       Opponent
Position         3018          2831

Owned cube                    : -0.0230
Centered cube                 : -0.2310
Centered cube (Jacoby rule)   : -0.2186
Opponent owns cube            : -0.3548

        Win     W(g)    W(bg)   L(g)    L(bg)   Equity  (cubeful)
static: 0.456   0.244   0.014   0.318   0.019   (-0.168  (-0.219))


No double           : -0.219
Double, pass        : +1.000   (+1.219)
Double, take        : -0.710   (-0.491)

Correct cube action: No double, beaver

@end example
